<?php

namespace App;

use Illuminate\Database\Eloquent\SoftDeletes;
use Illuminate\Notifications\Notifiable;
use Illuminate\Contracts\Auth\MustVerifyEmail;
use Illuminate\Foundation\Auth\User as Authenticatable;

class User extends Authenticatable
{
    use Notifiable;

    use SoftDeletes;
    /**
     * The attributes that are mass assignable.
     *
     * @var array
     */
    protected $fillable = [
        'firstname', 'lastname', 'email', 'username', 'password', 'position', 'phone_number', 'image', 'address', 'sponsor', 'parent',
        'membership_id', 'package_id', 'bank_id', 'bank_account_name', 'bank_account_number', 'deleted_at', 'last_seen', 'ststus'
    ];

    /**
     * The attributes that should be hidden for arrays.
     *
     * @var array
     */
    protected $hidden = [
        'password', 'remember_token',
    ];

    /**
     * The attributes that should be cast to native types.
     *
     * @var array
     */
    protected $casts = [
        'email_verified_at' => 'datetime',
    ];

    public  function pvs()
    {
        return $this->hasOne(PV::class);
    }

    public  function pins()
    {
        return $this->hasMany(Pin::class);
    }

    public  function agents()
    {
        return $this->belongsTo(Agent::class);
    }

    public function package()
    {
        return $this->belongsTo(Package::class);
    }

    public  function profile()
    {
        return $this->hasOne(Profile::class);
    }

    public  function customer()
    {
        return $this->hasMany(Sale::class);
    }
    public function rewards()
    {
        return $this->hasOne(user_reward::class, 'membership_id', 'membership_id');
    }

    public function withdrawals()
    {
        return $this->hasMany(Withdrawal::class, 'by', 'username');
    }

    public function bank()
    {
        return $this->belongsTo(Bank::class);
    }

    public function bonus()
    {
        return $this->hasMany(Bonus::class);
    }

    public  function store()
    {
        return $this->hasOne(Store::class);
    }

    public static function get_user_by_username($username){
        $user = User::where('username', $username)->first();
        if ($user)
        {
            return $user;
        }

        return null;
    }



    public static function get_user_by_membership_id($membership_id){
        $user = User::where('username', $membership_id)->first();
        if ($user)
        {
            return $user;
        }

        return null;
    }

//    public  static function all($columns = ['*'])
//    {
//        return parent::where('username', '!=', "root")->where('is_admin', '!=', 3 ); // TODO: Change the autogenerated stub
//    }


    protected $dates = ['deleted_at'];
}
